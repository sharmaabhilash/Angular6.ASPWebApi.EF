//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeLeavePortalAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeLeavePortalEntities : DbContext
    {
        public EmployeeLeavePortalEntities()
            : base("name=EmployeeLeavePortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_Department> Tbl_Department { get; set; }
        public virtual DbSet<Tbl_Position> Tbl_Position { get; set; }
        public virtual DbSet<Tbl_RegisterUser> Tbl_RegisterUser { get; set; }
        public virtual DbSet<Tbl_ApplyLeave> Tbl_ApplyLeave { get; set; }
        public virtual DbSet<VW_GetAppliedLeaveInfo> VW_GetAppliedLeaveInfo { get; set; }
        public virtual DbSet<VW_GetAllAppliedLeave> VW_GetAllAppliedLeave { get; set; }
    
        public virtual ObjectResult<USP_GetDepartmentDetails_Result> GetDepartmentDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDepartmentDetails_Result>("GetDepartmentDetails");
        }
    
        public virtual ObjectResult<USP_GetPositionDetails_Result> GetPositionDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPositionDetails_Result>("GetPositionDetails");
        }
    
        public virtual int OperationRegisterUser(Nullable<int> id, string name, string emailId, string password, Nullable<System.DateTime> dateOfJoining, Nullable<int> positionId, Nullable<int> departmentId, string approvalPermission, string uniqueId, string fileName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dateOfJoiningParameter = dateOfJoining.HasValue ?
                new ObjectParameter("DateOfJoining", dateOfJoining) :
                new ObjectParameter("DateOfJoining", typeof(System.DateTime));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var approvalPermissionParameter = approvalPermission != null ?
                new ObjectParameter("ApprovalPermission", approvalPermission) :
                new ObjectParameter("ApprovalPermission", typeof(string));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OperationRegisterUser", idParameter, nameParameter, emailIdParameter, passwordParameter, dateOfJoiningParameter, positionIdParameter, departmentIdParameter, approvalPermissionParameter, uniqueIdParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckForLogin(string emailId, string password, ObjectParameter uniqueId, ObjectParameter approvalPermission, ObjectParameter userName, ObjectParameter imageName)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckForLogin", emailIdParameter, passwordParameter, uniqueId, approvalPermission, userName, imageName);
        }
    
        public virtual int OperationApplyLeave(Nullable<long> id, string appliedBy, Nullable<System.DateTime> applyDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> noOfDays, string halfDay, Nullable<System.DateTime> halfDayDate, string reason, Nullable<int> mode, string uniqueId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var appliedByParameter = appliedBy != null ?
                new ObjectParameter("AppliedBy", appliedBy) :
                new ObjectParameter("AppliedBy", typeof(string));
    
            var applyDateParameter = applyDate.HasValue ?
                new ObjectParameter("ApplyDate", applyDate) :
                new ObjectParameter("ApplyDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var noOfDaysParameter = noOfDays.HasValue ?
                new ObjectParameter("NoOfDays", noOfDays) :
                new ObjectParameter("NoOfDays", typeof(decimal));
    
            var halfDayParameter = halfDay != null ?
                new ObjectParameter("HalfDay", halfDay) :
                new ObjectParameter("HalfDay", typeof(string));
    
            var halfDayDateParameter = halfDayDate.HasValue ?
                new ObjectParameter("HalfDayDate", halfDayDate) :
                new ObjectParameter("HalfDayDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OperationApplyLeave", idParameter, appliedByParameter, applyDateParameter, fromDateParameter, toDateParameter, noOfDaysParameter, halfDayParameter, halfDayDateParameter, reasonParameter, modeParameter, uniqueIdParameter);
        }
    
        public virtual int ApproveUnapproveLeave(string uniqueId, string status, string approveBy)
        {
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var approveByParameter = approveBy != null ?
                new ObjectParameter("ApproveBy", approveBy) :
                new ObjectParameter("ApproveBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveUnapproveLeave", uniqueIdParameter, statusParameter, approveByParameter);
        }
    }
}
